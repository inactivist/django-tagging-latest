#labels Featured
= Django Tagging =

This is a generic tagging application for use in Django projects.

== Installation ==

Use the following command to check out the latest source:

{{{
svn checkout http://django-tagging.googlecode.com/svn/trunk/ tagging
}}}

== Usage ==

Put this app into your project's `INSTALLED_APPS` setting and run `syncdb` to create its tables.

The initial version only has helpers for creating tags with a [http://del.icio.us del.icio.us] style text input - expect this to change in the near future.

The following is a sample `models.py` which demonstrates tagging on saving an object and can be used from Django's admin application:

{{{
from django.db import models
from tagging.validators import isTagList
from tagging.models import Tag

class TestModel(models.Model):
    """
    A model to demonstrate the ``tagging`` application.
    """
    name = models.CharField(maxlength=100)
    tag_list = models.CharField(maxlength=250, validator_list=[isTagList],
        help_text='Separate tags with spaces. Maximum 250 characters.')

    class Admin:
        pass

    def __str__(self):
        return self.name

    def save(self):
        super(TestModel, self).save()
        Tag.objects.update_tags(self, self.tag_list)
}}}

== Implementation Details ==

The application defines two models:

  * `Tag`, which is a basic model representing a tag. Methods which return tags are implemented in its manager.
  * `TaggedItem`, which uses Django's generic relations functionality to represent the relationship between a tag and any other object. Methods which return objects based on the tags they have are implemented in its manager.

